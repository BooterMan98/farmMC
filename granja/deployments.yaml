apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-2.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: granja-service
  name: granja-service
spec:
  ports:
    - name: "5001"
      port: 5001
      targetPort: 80
  selector:
    io.kompose.service: granja-service
status:
  loadBalancer: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-2.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: granja-service
  name: granja-service
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: granja-service
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-2.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/microsvcs: "true"
        io.kompose.service: granja-service
    spec:
      containers:
        - image: booterman/microservice-farm
          name: granja-service
          ports:
            - containerPort: 80
              hostPort: 5001
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-2.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: granja-service-events-receiver
  name: granja-service-events-receiver
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: granja-service-events-receiver
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-2.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/microsvcs: "true"
        io.kompose.service: granja-service-events-receiver
    spec:
      containers:
        - args:
            - python3
            - app/events.py
          image: booterman/microservice-farm
          name: granja-service-events-receiver
          resources: {}
      restartPolicy: Always
status: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: granja-service-mongodb-container
  name: granja-service-mongodb-container
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: granja-service-mongodb
  name: granja-service-mongodb
spec:
  ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
  selector:
    io.kompose.service: granja-service-mongodb
status:
  loadBalancer: {}


---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-2.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: granja-service-mongodb
  name: granja-service-mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: granja-service-mongodb
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-2.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/microsvcs: "true"
        io.kompose.service: granja-service-mongodb
    spec:
      containers:
        - image: mongo:5.0
          name: granja-service-mongodb
          resources: {}
          ports:
            - containerPort: 27017
              protocol: TCP
          volumeMounts:
            - mountPath: /data/db
              name: granja-service-mongodb-container
      restartPolicy: Always
      volumes:
        - name: granja-service-mongodb-container
          persistentVolumeClaim:
            claimName: granja-service-mongodb-container
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: granja-message-broker
  name: granja-message-broker
spec:
  ports:
    - name: "5672"
      port: 5672
      targetPort: 5672
    - name: "15672"
      port: 15672
      targetPort: 15672
  selector:
    io.kompose.service: granja-message-broker
status:
  loadBalancer: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: granja-message-broker
  name: granja-message-broker
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: granja-message-broker
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yaml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/microsvcs: "true"
        io.kompose.service: granja-message-broker
    spec:
      containers:
        - image: rabbitmq:3-management-alpine
          name: granja-message-broker
          ports:
            - containerPort: 5672
              hostPort: 5672
              protocol: TCP
            - containerPort: 15672
              hostPort: 15672
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: demo-04-api-gateway
  name: demo-04-api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: demo-04-api-gateway
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yaml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/microsvcs: "true"
        io.kompose.service: demo-04-api-gateway
    spec:
      containers:
        - image: booterman/microservice-farm-api-gateway
          name: demo-04-api-gateway
          ports:
            - containerPort: 80
              hostPort: 5050
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: demo-04-api-gateway
  name: demo-04-api-gateway
spec:
  ports:
    - name: "5050"
      port: 5050
      targetPort: 80
  selector:
    io.kompose.service: demo-04-api-gateway
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: chatbot-service
  name: chatbot-service
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: chatbot-service
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/microsvcs: "true"
        io.kompose.service: chatbot-service
    spec:
      containers:
        - image: booterman/chatbot-granja
          name: chatbot-service
          ports:
            - containerPort: 3000
              hostPort: 80
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: chatbot-service
  name: chatbot-service
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 3000
  selector:
    io.kompose.service: chatbot-service
status:
  loadBalancer: {}
